import streamlit as st
import numpy as np
import cv2
from PIL import Image
import matplotlib.pyplot as plt
import matplotlib

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
matplotlib.rc("font", family="Tahoma")

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ò‡∏µ‡∏°‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏ó‡∏±‡∏ô‡∏™‡∏°‡∏±‡∏¢ (‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏µ‡∏î‡∏≥) ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô
st.set_page_config(
    page_title="‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏£‡∏Ñ‡πÅ‡∏•‡∏∞‡∏ò‡∏≤‡∏ï‡∏∏‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏ö‡∏û‡∏∑‡∏ä",
    layout="wide",
    page_icon="durian_leaf1.png"  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏Ñ‡∏∏‡∏ì
)

st.markdown("""
<style>
    .main {background-color: #000000;}
    .stButton>button {background-color: #4CAF50; color: white; border-radius: 10px;}
    .stProgress .st-bo {background-color: #4CAF50;}
    .highlight-box {background-color: #1a1a1a; padding: 20px; border-radius: 10px; box-shadow: 0 4px 8px rgba(255,255,255,0.1);}
    .metric-card {background-color: #1a1a1a; padding: 15px; border-radius: 10px; box-shadow: 0 2px 4px rgba(255,255,255,0.1); text-align: center; color: #ffffff;}
    h1, h2, h3, p, div {color: #ffffff;}
</style>
""", unsafe_allow_html=True)

# ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏Ç‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠
st.image("durian_leaf1.png", width=50)  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏Ñ‡∏∏‡∏ì
st.title("üåø WEB APP ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏£‡∏Ñ‡πÅ‡∏•‡∏∞‡∏ò‡∏≤‡∏ï‡∏∏‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏ö‡∏û‡∏∑‡∏ä")

def analyze_leaf(image):
    img_array = np.array(image)
    img_rgb = cv2.cvtColor(img_array, cv2.COLOR_RGBA2RGB)
    img_hsv = cv2.cvtColor(img_rgb, cv2.COLOR_RGB2HSV)
    
    lower_brown = np.array([10, 50, 50])
    upper_brown = np.array([30, 255, 255])
    brown_mask = cv2.inRange(img_hsv, lower_brown, upper_brown)
    
    lower_yellow = np.array([20, 40, 100])
    upper_yellow = np.array([40, 255, 255])
    yellow_mask = cv2.inRange(img_hsv, lower_yellow, upper_yellow)
    
    lower_purple = np.array([120, 40, 50])
    upper_purple = np.array([160, 255, 255])
    purple_mask = cv2.inRange(img_hsv, lower_purple, upper_purple)
    
    lower_edge_brown = np.array([5, 50, 20])
    upper_edge_brown = np.array([20, 255, 100])
    edge_brown_mask = cv2.inRange(img_hsv, lower_edge_brown, upper_edge_brown)
    
    lower_gray = np.array([0, 0, 150])
    upper_gray = np.array([180, 30, 255])
    gray_mask = cv2.inRange(img_hsv, lower_gray, upper_gray)
    
    lower_pale_yellow = np.array([25, 20, 150])
    upper_pale_yellow = np.array([35, 100, 255])
    pale_yellow_mask = cv2.inRange(img_hsv, lower_pale_yellow, upper_pale_yellow)
    
    lower_dark_brown = np.array([5, 50, 20])
    upper_dark_brown = np.array([20, 255, 100])
    dark_brown_mask = cv2.inRange(img_hsv, lower_dark_brown, upper_dark_brown)
    
    total_pixels = img_hsv.shape[0] * img_hsv.shape[1]
    brown_pct = (np.sum(brown_mask > 0) / total_pixels) * 100
    yellow_pct = (np.sum(yellow_mask > 0) / total_pixels) * 100
    purple_pct = (np.sum(purple_mask > 0) / total_pixels) * 100
    edge_brown_pct = (np.sum(edge_brown_mask > 0) / total_pixels) * 100
    gray_pct = (np.sum(gray_mask > 0) / total_pixels) * 100
    pale_yellow_pct = (np.sum(pale_yellow_mask > 0) / total_pixels) * 100
    dark_brown_pct = (np.sum(dark_brown_mask > 0) / total_pixels) * 100
    
    disease_prob = (brown_pct + yellow_pct + purple_pct + edge_brown_pct + gray_pct + pale_yellow_pct + dark_brown_pct) / 7
    
    if yellow_pct > 10 or pale_yellow_pct > 10:
        ph_status = "‡∏î‡∏¥‡∏ô‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏£‡∏î‡∏™‡∏π‡∏á (pH < 6)"
    elif purple_pct > 5:
        ph_status = "‡∏î‡∏¥‡∏ô‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏î‡πà‡∏≤‡∏á‡∏™‡∏π‡∏á (pH > 7.5)"
    else:
        ph_status = "‡∏Ñ‡πà‡∏≤ pH ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏õ‡∏Å‡∏ï‡∏¥ (6-7.5)"
    
    brown_highlight = cv2.bitwise_and(img_rgb, img_rgb, mask=brown_mask)
    yellow_highlight = cv2.bitwise_and(img_rgb, img_rgb, mask=yellow_mask)
    purple_highlight = cv2.bitwise_and(img_rgb, img_rgb, mask=purple_mask)
    edge_brown_highlight = cv2.bitwise_and(img_rgb, img_rgb, mask=edge_brown_mask)
    gray_highlight = cv2.bitwise_and(img_rgb, img_rgb, mask=gray_mask)
    pale_yellow_highlight = cv2.bitwise_and(img_rgb, img_rgb, mask=pale_yellow_mask)
    dark_brown_highlight = cv2.bitwise_and(img_rgb, img_rgb, mask=dark_brown_mask)
    
    return (brown_highlight, yellow_highlight, purple_highlight, edge_brown_highlight, gray_highlight, 
            pale_yellow_highlight, dark_brown_highlight, img_rgb, brown_pct, yellow_pct, purple_pct, 
            edge_brown_pct, gray_pct, pale_yellow_pct, dark_brown_pct, disease_prob, ph_status)

def plot_rgb_histogram(image):
    r, g, b = cv2.split(image)
    plt.figure(figsize=(10, 4), facecolor="#000000")
    plt.hist(r.ravel(), bins=256, color='#FF6B6B', alpha=0.7, label='‡πÅ‡∏î‡∏á')
    plt.hist(g.ravel(), bins=256, color='#4CAF50', alpha=0.7, label='‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß')
    plt.hist(b.ravel(), bins=256, color='#4D96FF', alpha=0.7, label='‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô')
    plt.title("‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏µ RGB", fontsize=14, pad=10, color='white')
    plt.xlabel("‡∏Ñ‡πà‡∏≤‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•", fontsize=12, color='white')
    plt.ylabel("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà", fontsize=12, color='white')
    plt.legend(prop={'size': 10}, facecolor='#1a1a1a', edgecolor='white', labelcolor='white')
    plt.grid(True, linestyle='--', alpha=0.3, color='gray')
    plt.tick_params(axis='x', colors='white')
    plt.tick_params(axis='y', colors='white')
    st.pyplot(plt)

def disease_diagnosis(brown_pct, yellow_pct, purple_pct, edge_brown_pct, gray_pct, pale_yellow_pct, dark_brown_pct):
    diagnoses = {
        "‡πÇ‡∏£‡∏Ñ": [],
        "‡∏ò‡∏≤‡∏ï‡∏∏‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏Å (NPK)": [],
        "‡∏ò‡∏≤‡∏ï‡∏∏‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏£‡∏≠‡∏á": [],
        "‡∏à‡∏∏‡∏•‡∏ò‡∏≤‡∏ï‡∏∏": []
    }
    
    if brown_pct > 5.0:
        diagnoses["‡πÇ‡∏£‡∏Ñ"].append({"name": "‡πÇ‡∏£‡∏Ñ‡πÉ‡∏ö‡πÑ‡∏´‡∏°‡πâ", "description": "‡πÉ‡∏ö‡∏°‡∏µ‡∏à‡∏∏‡∏î‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏£‡∏≤", "recommendation": "‡πÉ‡∏ä‡πâ‡∏™‡∏≤‡∏£‡∏Ü‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏£‡∏≤‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡πÉ‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏≠‡∏≠‡∏Å"})
    if gray_pct > 3.0:
        diagnoses["‡πÇ‡∏£‡∏Ñ"].append({"name": "‡πÇ‡∏£‡∏Ñ‡∏£‡∏≤‡πÅ‡∏õ‡πâ‡∏á", "description": "‡πÉ‡∏ö‡∏°‡∏µ‡∏ù‡πâ‡∏≤‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡∏≤‡∏à‡∏≤‡∏Å‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏£‡∏≤", "recommendation": "‡πÉ‡∏ä‡πâ‡∏™‡∏≤‡∏£‡∏Å‡∏≥‡∏à‡∏±‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏£‡∏≤‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô"})
    if dark_brown_pct > 4.0:
        diagnoses["‡πÇ‡∏£‡∏Ñ"].append({"name": "‡πÇ‡∏£‡∏Ñ‡∏à‡∏∏‡∏î‡πÉ‡∏ö/‡πÄ‡∏ô‡πà‡∏≤", "description": "‡πÉ‡∏ö‡∏°‡∏µ‡∏à‡∏∏‡∏î‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÄ‡∏Ç‡πâ‡∏°‡∏ñ‡∏∂‡∏á‡∏î‡∏≥", "recommendation": "‡∏Å‡∏≥‡∏à‡∏±‡∏î‡πÉ‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏™‡∏≤‡∏£‡∏Ü‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πâ‡∏≠"})
    
    if yellow_pct > 10.0:
        diagnoses["‡∏ò‡∏≤‡∏ï‡∏∏‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏Å (NPK)"].append({"name": "‡∏Ç‡∏≤‡∏î‡πÑ‡∏ô‡πÇ‡∏ï‡∏£‡πÄ‡∏à‡∏ô (N)", "description": "‡πÉ‡∏ö‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏ó‡∏±‡πà‡∏ß‡∏ó‡∏±‡πâ‡∏á‡πÉ‡∏ö", "recommendation": "‡πÉ‡∏™‡πà‡∏õ‡∏∏‡πã‡∏¢‡πÑ‡∏ô‡πÇ‡∏ï‡∏£‡πÄ‡∏à‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‡∏¢‡∏π‡πÄ‡∏£‡∏µ‡∏¢"})
    if purple_pct > 5.0:
        diagnoses["‡∏ò‡∏≤‡∏ï‡∏∏‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏Å (NPK)"].append({"name": "‡∏Ç‡∏≤‡∏î‡∏ü‡∏≠‡∏™‡∏ü‡∏≠‡∏£‡∏±‡∏™ (P)", "description": "‡πÉ‡∏ö‡∏°‡∏µ‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏î‡∏á", "recommendation": "‡πÉ‡∏™‡πà‡∏õ‡∏∏‡πã‡∏¢‡∏ü‡∏≠‡∏™‡πÄ‡∏ü‡∏ï"})
    if edge_brown_pct > 4.0:
        diagnoses["‡∏ò‡∏≤‡∏ï‡∏∏‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏Å (NPK)"].append({"name": "‡∏Ç‡∏≤‡∏î‡πÇ‡∏û‡πÅ‡∏ó‡∏™‡πÄ‡∏ã‡∏µ‡∏¢‡∏° (K)", "description": "‡∏Ç‡∏≠‡∏ö‡πÉ‡∏ö‡πÑ‡∏´‡∏°‡πâ‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•", "recommendation": "‡πÉ‡∏™‡πà‡∏õ‡∏∏‡πã‡∏¢‡πÇ‡∏û‡πÅ‡∏ó‡∏™‡πÄ‡∏ã‡∏µ‡∏¢‡∏° ‡πÄ‡∏ä‡πà‡∏ô ‡πÇ‡∏û‡πÅ‡∏ó‡∏™‡πÄ‡∏ã‡∏µ‡∏¢‡∏°‡∏Ñ‡∏•‡∏≠‡πÑ‡∏£‡∏î‡πå"})
    
    if gray_pct > 3.0 and brown_pct < 5.0:
        diagnoses["‡∏ò‡∏≤‡∏ï‡∏∏‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏£‡∏≠‡∏á"].append({"name": "‡∏Ç‡∏≤‡∏î‡πÅ‡∏Ñ‡∏•‡πÄ‡∏ã‡∏µ‡∏¢‡∏° (Ca)", "description": "‡πÉ‡∏ö‡∏ã‡∏µ‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏à‡∏∏‡∏î‡∏Ç‡∏≤‡∏ß", "recommendation": "‡πÉ‡∏™‡πà‡∏õ‡∏π‡∏ô‡∏Ç‡∏≤‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏Ñ‡∏•‡πÄ‡∏ã‡∏µ‡∏¢‡∏°‡πÑ‡∏ô‡πÄ‡∏ï‡∏£‡∏ï"})
    if pale_yellow_pct > 5.0:
        diagnoses["‡∏ò‡∏≤‡∏ï‡∏∏‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏£‡∏≠‡∏á"].append({"name": "‡∏Ç‡∏≤‡∏î‡πÅ‡∏°‡∏Å‡∏ô‡∏µ‡πÄ‡∏ã‡∏µ‡∏¢‡∏° (Mg)", "description": "‡πÉ‡∏ö‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏≠‡πà‡∏≠‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏™‡πâ‡∏ô‡πÉ‡∏ö", "recommendation": "‡πÉ‡∏™‡πà‡πÅ‡∏°‡∏Å‡∏ô‡∏µ‡πÄ‡∏ã‡∏µ‡∏¢‡∏°‡∏ã‡∏±‡∏•‡πÄ‡∏ü‡∏ï"})
    if dark_brown_pct > 4.0 and yellow_pct < 10.0:
        diagnoses["‡∏ò‡∏≤‡∏ï‡∏∏‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏£‡∏≠‡∏á"].append({"name": "‡∏Ç‡∏≤‡∏î‡∏Å‡∏≥‡∏°‡∏∞‡∏ñ‡∏±‡∏ô (S)", "description": "‡πÉ‡∏ö‡∏°‡∏µ‡∏à‡∏∏‡∏î‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÄ‡∏Ç‡πâ‡∏°", "recommendation": "‡πÉ‡∏™‡πà‡∏õ‡∏∏‡πã‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≥‡∏°‡∏∞‡∏ñ‡∏±‡∏ô"})
    
    if pale_yellow_pct > 5.0 and yellow_pct < 10.0:
        diagnoses["‡∏à‡∏∏‡∏•‡∏ò‡∏≤‡∏ï‡∏∏"].append({"name": "‡∏Ç‡∏≤‡∏î‡πÄ‡∏´‡∏•‡πá‡∏Å (Fe)", "description": "‡πÉ‡∏ö‡∏ã‡∏µ‡∏î‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏™‡πâ‡∏ô‡πÉ‡∏ö", "recommendation": "‡πÉ‡∏™‡πà‡∏ò‡∏≤‡∏ï‡∏∏‡πÄ‡∏´‡∏•‡πá‡∏Å‡∏Ñ‡∏µ‡πÄ‡∏•‡∏ï"})
    if dark_brown_pct > 4.0 and edge_brown_pct < 4.0:
        diagnoses["‡∏à‡∏∏‡∏•‡∏ò‡∏≤‡∏ï‡∏∏"].append({"name": "‡∏Ç‡∏≤‡∏î‡∏™‡∏±‡∏á‡∏Å‡∏∞‡∏™‡∏µ (Zn)", "description": "‡πÉ‡∏ö‡∏°‡∏µ‡∏à‡∏∏‡∏î‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÄ‡∏Ç‡πâ‡∏°", "recommendation": "‡πÉ‡∏™‡πà‡∏™‡∏±‡∏á‡∏Å‡∏∞‡∏™‡∏µ‡∏ã‡∏±‡∏•‡πÄ‡∏ü‡∏ï"})
    if brown_pct > 5.0 and purple_pct > 5.0:
        diagnoses["‡∏à‡∏∏‡∏•‡∏ò‡∏≤‡∏ï‡∏∏"].append({"name": "‡∏Ç‡∏≤‡∏î‡∏ó‡∏≠‡∏á‡πÅ‡∏î‡∏á (Cu)", "description": "‡πÉ‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÅ‡∏•‡∏∞‡∏°‡πà‡∏ß‡∏á", "recommendation": "‡πÉ‡∏™‡πà‡∏ó‡∏≠‡∏á‡πÅ‡∏î‡∏á‡∏ã‡∏±‡∏•‡πÄ‡∏ü‡∏ï"})
    
    return diagnoses

# ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
uploaded_file = st.file_uploader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡∏û‡∏∑‡∏ä (JPG, PNG, JPEG)", type=["jpg", "png", "jpeg"], 
                               help="‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5MB")

if uploaded_file is not None:
    image = Image.open(uploaded_file)
    image_resized = image.resize((300, int(300 * image.height / image.width)))
    st.image(image_resized, caption="‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡∏û‡∏∑‡∏ä‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î")
    
    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û..."):
        (brown_highlight, yellow_highlight, purple_highlight, edge_brown_highlight, gray_highlight, 
         pale_yellow_highlight, dark_brown_highlight, img_rgb, brown_pct, yellow_pct, purple_pct, 
         edge_brown_pct, gray_pct, pale_yellow_pct, dark_brown_pct, disease_prob, ph_status) = analyze_leaf(image)
    
    st.subheader("üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û")
    col1, col2 = st.columns(2, gap="medium")
    
    with col1:
        st.markdown('<div class="highlight-box">', unsafe_allow_html=True)
        brown_resized = Image.fromarray(brown_highlight).resize((200, int(200 * brown_highlight.shape[0] / brown_highlight.shape[1])))
        st.image(brown_resized, caption="‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏• (‡πÇ‡∏£‡∏Ñ‡πÉ‡∏ö‡πÑ‡∏´‡∏°‡πâ)")
        st.metric("‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Ç‡∏≤‡∏î‡∏ó‡∏≠‡∏á‡πÅ‡∏î‡∏á", f"{brown_pct:.2f}%", delta=None)
        purple_resized = Image.fromarray(purple_highlight).resize((200, int(200 * purple_highlight.shape[0] / purple_highlight.shape[1])))
        st.image(purple_resized, caption="‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á (‡∏Ç‡∏≤‡∏î‡∏ü‡∏≠‡∏™‡∏ü‡∏≠‡∏£‡∏±‡∏™)")
        st.metric("‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Ç‡∏≤‡∏î‡∏ü‡∏≠‡∏™‡∏ü‡∏≠‡∏£‡∏±‡∏™", f"{purple_pct:.2f}%", delta=None)
        gray_resized = Image.fromarray(gray_highlight).resize((200, int(200 * gray_highlight.shape[0] / gray_highlight.shape[1])))
        st.image(gray_resized, caption="‡∏™‡∏µ‡πÄ‡∏ó‡∏≤/‡∏Ç‡∏≤‡∏ß (‡πÇ‡∏£‡∏Ñ‡∏£‡∏≤‡πÅ‡∏õ‡πâ‡∏á/‡∏Ç‡∏≤‡∏î‡πÅ‡∏Ñ‡∏•‡πÄ‡∏ã‡∏µ‡∏¢‡∏°)")
        st.metric("‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Ç‡∏≤‡∏î‡πÅ‡∏Ñ‡∏•‡πÄ‡∏ã‡∏µ‡∏¢‡∏°", f"{gray_pct:.2f}%", delta=None)
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col2:
        st.markdown('<div class="highlight-box">', unsafe_allow_html=True)
        yellow_resized = Image.fromarray(yellow_highlight).resize((200, int(200 * yellow_highlight.shape[0] / yellow_highlight.shape[1])))
        st.image(yellow_resized, caption="‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á (‡∏Ç‡∏≤‡∏î‡πÑ‡∏ô‡πÇ‡∏ï‡∏£‡πÄ‡∏à‡∏ô)")
        st.metric("‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Ç‡∏≤‡∏î‡πÑ‡∏ô‡πÇ‡∏ï‡∏£‡πÄ‡∏à‡∏ô", f"{yellow_pct:.2f}%", delta=None)
        edge_brown_resized = Image.fromarray(edge_brown_highlight).resize((200, int(200 * edge_brown_highlight.shape[0] / edge_brown_highlight.shape[1])))
        st.image(edge_brown_resized, caption="‡∏Ç‡∏≠‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏• (‡∏Ç‡∏≤‡∏î‡πÇ‡∏û‡πÅ‡∏ó‡∏™‡πÄ‡∏ã‡∏µ‡∏¢‡∏°)")
        st.metric("‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Ç‡∏≤‡∏î‡πÇ‡∏û‡πÅ‡∏ó‡∏™‡πÄ‡∏ã‡∏µ‡∏¢‡∏°", f"{edge_brown_pct:.2f}%", delta=None)
        pale_yellow_resized = Image.fromarray(pale_yellow_highlight).resize((200, int(200 * pale_yellow_highlight.shape[0] / pale_yellow_highlight.shape[1])))
        st.image(pale_yellow_resized, caption="‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏≠‡πà‡∏≠‡∏ô (‡∏Ç‡∏≤‡∏î‡πÅ‡∏°‡∏Å‡∏ô‡∏µ‡πÄ‡∏ã‡∏µ‡∏¢‡∏°/‡πÄ‡∏´‡∏•‡πá‡∏Å)")
        st.metric("‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Ç‡∏≤‡∏î‡πÅ‡∏°‡∏Å‡∏ô‡∏µ‡πÄ‡∏ã‡∏µ‡∏¢‡∏°", f"{pale_yellow_pct:.2f}%", delta=None)
        dark_brown_resized = Image.fromarray(dark_brown_highlight).resize((200, int(200 * dark_brown_highlight.shape[0] / dark_brown_highlight.shape[1])))
        st.image(dark_brown_resized, caption="‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÄ‡∏Ç‡πâ‡∏° (‡∏à‡∏∏‡∏î‡πÉ‡∏ö/‡∏Ç‡∏≤‡∏î‡∏™‡∏±‡∏á‡∏Å‡∏∞‡∏™‡∏µ)")
        st.metric("‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Ç‡∏≤‡∏î‡∏™‡∏±‡∏á‡∏Å‡∏∞‡∏™‡∏µ", f"{dark_brown_pct:.2f}%", delta=None)
        st.markdown('</div>', unsafe_allow_html=True)

    st.subheader("üìà ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏µ RGB")
    plot_rgb_histogram(img_rgb)

    st.subheader("üîç ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤")
    st.markdown('<div class="highlight-box">', unsafe_allow_html=True)
    st.progress(min(disease_prob / 100, 1.0))
    st.write(f"‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤: **{disease_prob:.2f}%**")
    st.markdown('</div>', unsafe_allow_html=True)

    st.subheader("‚öóÔ∏è ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡πà‡∏≤ pH")
    st.markdown('<div class="highlight-box">', unsafe_allow_html=True)
    st.write(f"‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ pH: **{ph_status}**")
    st.markdown('</div>', unsafe_allow_html=True)

    st.subheader("üè• ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥")
    diagnoses = disease_diagnosis(brown_pct, yellow_pct, purple_pct, edge_brown_pct, gray_pct, pale_yellow_pct, dark_brown_pct)
    
    for category, issues in diagnoses.items():
        if issues:
            with st.expander(f"üìå {category}", expanded=True):
                for issue in issues:
                    st.markdown(f"**{issue['name']}**")
                    st.write(f"- **‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏≠‡∏≤‡∏Å‡∏≤‡∏£:** {issue['description']}")
                    st.write(f"- **‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:** {issue['recommendation']}")
    if not any(diagnoses.values()):
        st.success("‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏£‡∏Ñ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏î‡∏ò‡∏≤‡∏ï‡∏∏‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô")