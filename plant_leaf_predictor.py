import streamlit as st
import numpy as np
import cv2
from PIL import Image
import matplotlib.pyplot as plt
import matplotlib
from streamlit_webrtc import webrtc_streamer, RTCConfiguration, VideoProcessorBase, WebRtcMode
import av
import datetime
import pandas as pd
import os
from skimage.feature import graycomatrix, graycoprops
import streamlit.components.v1 as components

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
matplotlib.rc("font", family="Tahoma")

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ò‡∏µ‡∏°‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏ó‡∏±‡∏ô‡∏™‡∏°‡∏±‡∏¢ (‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏µ‡πÄ‡∏Ç‡πâ‡∏°)
st.set_page_config(
    page_title="‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏£‡∏Ñ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏î‡∏ò‡∏≤‡∏ï‡∏∏‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡πÉ‡∏ö‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡∏ä", 
    layout="wide",
    page_icon="images/durian_leaf1.png")
# ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏≠‡∏õ
st.image("images/durian_leaf1.png", width=100)  # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
st.title("üåø ‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏£‡∏Ñ‡πÅ‡∏•‡∏∞‡∏ò‡∏≤‡∏ï‡∏∏‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏ö‡∏û‡∏∑‡∏ä")
st.write("‡πÅ‡∏≠‡∏õ‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÉ‡∏ö‡∏û‡∏∑‡∏ä")

st.markdown("""
<style>
    .main {background-color: #121212; padding: 20px;}
    .stButton>button {background-color: #4CAF50; color: white; border-radius: 12px; padding: 10px 20px; font-weight: bold;}
    .stProgress .st-bo {background-color: #4CAF50;}
    .highlight-box {background-color: #1e1e1e; padding: 20px; border-radius: 15px; box-shadow: 0 4px 10px rgba(255,255,255,0.1); margin-bottom: 20px;}
    .metric-card {background-color: #262626; padding: 15px; border-radius: 12px; box-shadow: 0 2px 6px rgba(255,255,255,0.1); text-align: center; color: #ffffff; margin: 10px 0;}
    .card {background-color: #1e1e1e; padding: 20px; border-radius: 15px; box-shadow: 0 4px 10px rgba(255,255,255,0.1); margin-bottom: 20px;}
    h1, h2, h3, p, div {color: #e0e0e0; font-family: 'Arial', sans-serif;}
    .centered-image {display: flex; justify-content: center; align-items: center; margin: 20px 0;}
    .stTabs [data-baseweb="tab-list"] {background-color: #1e1e1e; border-radius: 10px; padding: 5px;}
    .stTabs [data-baseweb="tab"] {color: #e0e0e0; border-radius: 8px; padding: 10px 20px; margin: 0 5px;}
    .stTabs [aria-selected="true"] {background-color: #4CAF50; color: white;}
    .icon {vertical-align: middle; margin-right: 8px;}
</style>
""", unsafe_allow_html=True)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏ö‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢ HTML/CSS
def create_card(title, content, icon="üìä"):
    components.html(f"""
    <div class="card">
        <h3><span class="icon">{icon}</span>{title}</h3>
        <p>{content}</p>
    </div>
    """, height=150)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ú‡∏¥‡∏ß‡∏î‡πâ‡∏ß‡∏¢ GLCM
def texture_analysis(image_rgb):
    img_gray = cv2.cvtColor(image_rgb, cv2.COLOR_RGB2GRAY)
    glcm = graycomatrix(img_gray, distances=[1], angles=[0, np.pi/4], levels=256, symmetric=True, normed=True)
    contrast = graycoprops(glcm, 'contrast')[0, 0]
    homogeneity = graycoprops(glcm, 'homogeneity')[0, 0]
    energy = graycoprops(glcm, 'energy')[0, 0]
    correlation = graycoprops(glcm, 'correlation')[0, 0]
    return {
        "contrast": contrast,
        "homogeneity": homogeneity,
        "energy": energy,
        "correlation": correlation
    }

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÉ‡∏ö‡∏û‡∏∑‡∏ä
def analyze_leaf(image):
    img_array = np.array(image)
    img_rgb = cv2.cvtColor(img_array, cv2.COLOR_RGBA2RGB)
    img_hsv = cv2.cvtColor(img_rgb, cv2.COLOR_RGB2HSV)
    
    kernel = np.ones((5, 5), np.uint8)
    
    lower_brown = np.array([10, 50, 50])
    upper_brown = np.array([30, 255, 255])
    brown_mask = cv2.inRange(img_hsv, lower_brown, upper_brown)
    brown_mask = cv2.morphologyEx(brown_mask, cv2.MORPH_OPEN, kernel)
    brown_mask = cv2.morphologyEx(brown_mask, cv2.MORPH_CLOSE, kernel)
    
    lower_yellow = np.array([20, 40, 100])
    upper_yellow = np.array([40, 255, 255])
    yellow_mask = cv2.inRange(img_hsv, lower_yellow, upper_yellow)
    yellow_mask = cv2.morphologyEx(yellow_mask, cv2.MORPH_OPEN, kernel)
    yellow_mask = cv2.morphologyEx(yellow_mask, cv2.MORPH_CLOSE, kernel)
    
    lower_purple = np.array([120, 40, 50])
    upper_purple = np.array([160, 255, 255])
    purple_mask = cv2.inRange(img_hsv, lower_purple, upper_purple)
    purple_mask = cv2.morphologyEx(purple_mask, cv2.MORPH_OPEN, kernel)
    purple_mask = cv2.morphologyEx(purple_mask, cv2.MORPH_CLOSE, kernel)
    
    lower_edge_brown = np.array([5, 50, 20])
    upper_edge_brown = np.array([20, 255, 100])
    edge_brown_mask = cv2.inRange(img_hsv, lower_edge_brown, upper_edge_brown)
    edge_brown_mask = cv2.morphologyEx(edge_brown_mask, cv2.MORPH_OPEN, kernel)
    edge_brown_mask = cv2.morphologyEx(edge_brown_mask, cv2.MORPH_CLOSE, kernel)
    
    lower_gray = np.array([0, 0, 150])
    upper_gray = np.array([180, 30, 255])
    gray_mask = cv2.inRange(img_hsv, lower_gray, upper_gray)
    gray_mask = cv2.morphologyEx(gray_mask, cv2.MORPH_OPEN, kernel)
    gray_mask = cv2.morphologyEx(gray_mask, cv2.MORPH_CLOSE, kernel)
    
    lower_pale_yellow = np.array([25, 20, 150])
    upper_pale_yellow = np.array([35, 100, 255])
    pale_yellow_mask = cv2.inRange(img_hsv, lower_pale_yellow, upper_pale_yellow)
    pale_yellow_mask = cv2.morphologyEx(pale_yellow_mask, cv2.MORPH_OPEN, kernel)
    pale_yellow_mask = cv2.morphologyEx(pale_yellow_mask, cv2.MORPH_CLOSE, kernel)
    
    lower_dark_brown = np.array([5, 50, 20])
    upper_dark_brown = np.array([20, 255, 100])
    dark_brown_mask = cv2.inRange(img_hsv, lower_dark_brown, upper_dark_brown)
    dark_brown_mask = cv2.morphologyEx(dark_brown_mask, cv2.MORPH_OPEN, kernel)
    dark_brown_mask = cv2.morphologyEx(dark_brown_mask, cv2.MORPH_CLOSE, kernel)
    
    total_pixels = img_hsv.shape[0] * img_hsv.shape[1]
    brown_pct = float((np.sum(brown_mask > 0) / total_pixels) * 100)
    yellow_pct = float((np.sum(yellow_mask > 0) / total_pixels) * 100)
    purple_pct = float((np.sum(purple_mask > 0) / total_pixels) * 100)
    edge_brown_pct = float((np.sum(edge_brown_mask > 0) / total_pixels) * 100)
    gray_pct = float((np.sum(gray_mask > 0) / total_pixels) * 100)
    pale_yellow_pct = float((np.sum(pale_yellow_mask > 0) / total_pixels) * 100)
    dark_brown_pct = float((np.sum(dark_brown_mask > 0) / total_pixels) * 100)
    
    disease_prob = float((brown_pct + yellow_pct + purple_pct + edge_brown_pct + gray_pct + pale_yellow_pct + dark_brown_pct) / 7)
    
    if yellow_pct > 10 or pale_yellow_pct > 10:
        ph_status = "‡∏î‡∏¥‡∏ô‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏£‡∏î‡∏™‡∏π‡∏á (pH < 6)"
    elif purple_pct > 5:
        ph_status = "‡∏î‡∏¥‡∏ô‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏î‡πà‡∏≤‡∏á‡∏™‡∏π‡∏á (pH > 7.5)"
    else:
        ph_status = "‡∏Ñ‡πà‡∏≤ pH ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏õ‡∏Å‡∏ï‡∏¥ (6-7.5)"
    
    brown_highlight = cv2.bitwise_and(img_rgb, img_rgb, mask=brown_mask)
    yellow_highlight = cv2.bitwise_and(img_rgb, img_rgb, mask=yellow_mask)
    purple_highlight = cv2.bitwise_and(img_rgb, img_rgb, mask=purple_mask)
    edge_brown_highlight = cv2.bitwise_and(img_rgb, img_rgb, mask=edge_brown_mask)
    gray_highlight = cv2.bitwise_and(img_rgb, img_rgb, mask=gray_mask)
    pale_yellow_highlight = cv2.bitwise_and(img_rgb, img_rgb, mask=pale_yellow_mask)
    dark_brown_highlight = cv2.bitwise_and(img_rgb, img_rgb, mask=dark_brown_mask)
    
    texture_features = texture_analysis(img_rgb)
    
    return (brown_highlight, yellow_highlight, purple_highlight, edge_brown_highlight, gray_highlight, 
            pale_yellow_highlight, dark_brown_highlight, img_rgb, brown_pct, yellow_pct, purple_pct, 
            edge_brown_pct, gray_pct, pale_yellow_pct, dark_brown_pct, disease_prob, ph_status, texture_features)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏£‡∏≤‡∏ü RGB
def plot_rgb_histogram(image):
    r, g, b = cv2.split(image)
    plt.figure(figsize=(10, 4), facecolor="#121212")
    plt.hist(r.ravel(), bins=256, color='#FF6B6B', alpha=0.7, label='‡πÅ‡∏î‡∏á')
    plt.hist(g.ravel(), bins=256, color='#4CAF50', alpha=0.7, label='‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß')
    plt.hist(b.ravel(), bins=256, color='#4D96FF', alpha=0.7, label='‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô')
    plt.title("‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏µ RGB", fontsize=14, pad=10, color='white')
    plt.xlabel("‡∏Ñ‡πà‡∏≤‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•", fontsize=12, color='white')
    plt.ylabel("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà", fontsize=12, color='white')
    plt.legend(prop={'size': 10}, facecolor='#1a1a1a', edgecolor='white', labelcolor='white')
    plt.grid(True, linestyle='--', alpha=0.3, color='gray')
    plt.tick_params(axis='x', colors='white')
    plt.tick_params(axis='y', colors='white')
    st.pyplot(plt)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢
def disease_diagnosis(brown_pct, yellow_pct, purple_pct, edge_brown_pct, gray_pct, pale_yellow_pct, dark_brown_pct, texture_features):
    diagnoses = {
        "‡πÇ‡∏£‡∏Ñ": [],
        "‡∏ò‡∏≤‡∏ï‡∏∏‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏Å (N-P-K)": [],
        "‡∏ò‡∏≤‡∏ï‡∏∏‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏£‡∏≠‡∏á (Ca-Mg-S)": [],
        "‡∏à‡∏∏‡∏•‡∏ò‡∏≤‡∏ï‡∏∏": []
    }
    
    contrast = texture_features["contrast"]
    homogeneity = texture_features["homogeneity"]
    energy = texture_features["energy"]
    correlation = texture_features["correlation"]
    
    if brown_pct > 5.0:
        if contrast > 150 and homogeneity < 0.5:
            diagnoses["‡πÇ‡∏£‡∏Ñ"].append({
                "name": "‡πÇ‡∏£‡∏Ñ‡πÉ‡∏ö‡πÑ‡∏´‡∏°‡πâ",
                "description": "‡πÉ‡∏ö‡∏°‡∏µ‡∏à‡∏∏‡∏î‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏£‡∏≤ ‡∏û‡∏∑‡πâ‡∏ô‡∏ú‡∏¥‡∏ß‡∏´‡∏¢‡∏≤‡∏ö",
                "recommendation": "‡πÉ‡∏ä‡πâ‡∏™‡∏≤‡∏£‡∏Ü‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏£‡∏≤‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡πÉ‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏≠‡∏≠‡∏Å"
            })
        else:
            diagnoses["‡∏à‡∏∏‡∏•‡∏ò‡∏≤‡∏ï‡∏∏"].append({
                "name": "‡∏Ç‡∏≤‡∏î‡∏ó‡∏≠‡∏á‡πÅ‡∏î‡∏á (Cu)",
                "description": "‡πÉ‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏• ‡∏û‡∏∑‡πâ‡∏ô‡∏ú‡∏¥‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏ö",
                "recommendation": "‡πÉ‡∏™‡πà‡∏ó‡∏≠‡∏á‡πÅ‡∏î‡∏á‡∏ã‡∏±‡∏•‡πÄ‡∏ü‡∏ï"
            })
    
    if gray_pct > 3.0:
        if contrast > 100 and homogeneity < 0.6:
            diagnoses["‡πÇ‡∏£‡∏Ñ"].append({
                "name": "‡πÇ‡∏£‡∏Ñ‡∏£‡∏≤‡πÅ‡∏õ‡πâ‡∏á",
                "description": "‡πÉ‡∏ö‡∏°‡∏µ‡∏ù‡πâ‡∏≤‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡∏≤‡∏à‡∏≤‡∏Å‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏£‡∏≤ ‡∏û‡∏∑‡πâ‡∏ô‡∏ú‡∏¥‡∏ß‡∏´‡∏¢‡∏≤‡∏ö",
                "recommendation": "‡πÉ‡∏ä‡πâ‡∏™‡∏≤‡∏£‡∏Å‡∏≥‡∏à‡∏±‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏£‡∏≤‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô"
            })
        else:
            diagnoses["‡∏ò‡∏≤‡∏ï‡∏∏‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏£‡∏≠‡∏á (Ca-Mg-S)"].append({
                "name": "‡∏Ç‡∏≤‡∏î‡πÅ‡∏Ñ‡∏•‡πÄ‡∏ã‡∏µ‡∏¢‡∏° (Ca)",
                "description": "‡πÉ‡∏ö‡∏ã‡∏µ‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏à‡∏∏‡∏î‡∏Ç‡∏≤‡∏ß ‡∏û‡∏∑‡πâ‡∏ô‡∏ú‡∏¥‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏ö",
                "recommendation": "‡πÉ‡∏™‡πà‡∏õ‡∏π‡∏ô‡∏Ç‡∏≤‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏Ñ‡∏•‡πÄ‡∏ã‡∏µ‡∏¢‡∏°‡πÑ‡∏ô‡πÄ‡∏ï‡∏£‡∏ï"
            })
    
    if dark_brown_pct > 4.0:
        if energy < 0.2:
            diagnoses["‡πÇ‡∏£‡∏Ñ"].append({
                "name": "‡πÇ‡∏£‡∏Ñ‡∏à‡∏∏‡∏î‡πÉ‡∏ö/‡πÄ‡∏ô‡πà‡∏≤",
                "description": "‡πÉ‡∏ö‡∏°‡∏µ‡∏à‡∏∏‡∏î‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÄ‡∏Ç‡πâ‡∏°‡∏ñ‡∏∂‡∏á‡∏î‡∏≥ ‡∏û‡∏∑‡πâ‡∏ô‡∏ú‡∏¥‡∏ß‡πÑ‡∏°‡πà‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠",
                "recommendation": "‡∏Å‡∏≥‡∏à‡∏±‡∏î‡πÉ‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏™‡∏≤‡∏£‡∏Ü‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πâ‡∏≠"
            })
        else:
            diagnoses["‡∏à‡∏∏‡∏•‡∏ò‡∏≤‡∏ï‡∏∏"].append({
                "name": "‡∏Ç‡∏≤‡∏î‡∏™‡∏±‡∏á‡∏Å‡∏∞‡∏™‡∏µ (Zn)",
                "description": "‡πÉ‡∏ö‡∏°‡∏µ‡∏à‡∏∏‡∏î‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÄ‡∏Ç‡πâ‡∏° ‡∏û‡∏∑‡πâ‡∏ô‡∏ú‡∏¥‡∏ß‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠",
                "recommendation": "‡πÉ‡∏™‡πà‡∏™‡∏±‡∏á‡∏Å‡∏∞‡∏™‡∏µ‡∏ã‡∏±‡∏•‡πÄ‡∏ü‡∏ï"
            })
    
    if yellow_pct > 10.0:
        diagnoses["‡∏ò‡∏≤‡∏ï‡∏∏‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏Å (N-P-K)"].append({
            "name": "‡∏Ç‡∏≤‡∏î‡πÑ‡∏ô‡πÇ‡∏ï‡∏£‡πÄ‡∏à‡∏ô (N)",
            "description": "‡πÉ‡∏ö‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏ó‡∏±‡πà‡∏ß‡∏ó‡∏±‡πâ‡∏á‡πÉ‡∏ö",
            "recommendation": "‡πÉ‡∏™‡πà‡∏õ‡∏∏‡πã‡∏¢‡πÑ‡∏ô‡πÇ‡∏ï‡∏£‡πÄ‡∏à‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‡∏¢‡∏π‡πÄ‡∏£‡∏µ‡∏¢"
        })
    if purple_pct > 5.0:
        diagnoses["‡∏ò‡∏≤‡∏ï‡∏∏‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏Å (N-P-K)"].append({
            "name": "‡∏Ç‡∏≤‡∏î‡∏ü‡∏≠‡∏™‡∏ü‡∏≠‡∏£‡∏±‡∏™ (P)",
            "description": "‡πÉ‡∏ö‡∏°‡∏µ‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏î‡∏á",
            "recommendation": "‡πÉ‡∏™‡πà‡∏õ‡∏∏‡πã‡∏¢‡∏ü‡∏≠‡∏™‡πÄ‡∏ü‡∏ï"
        })
    if edge_brown_pct > 4.0:
        diagnoses["‡∏ò‡∏≤‡∏ï‡∏∏‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏Å (N-P-K)"].append({
            "name": "‡∏Ç‡∏≤‡∏î‡πÇ‡∏û‡πÅ‡∏ó‡∏™‡πÄ‡∏ã‡∏µ‡∏¢‡∏° (K)",
            "description": "‡∏Ç‡∏≠‡∏ö‡πÉ‡∏ö‡πÑ‡∏´‡∏°‡πâ‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•",
            "recommendation": "‡πÉ‡∏™‡πà‡∏õ‡∏∏‡πã‡∏¢‡πÇ‡∏û‡πÅ‡∏ó‡∏™‡πÄ‡∏ã‡∏µ‡∏¢‡∏° ‡πÄ‡∏ä‡πà‡∏ô ‡πÇ‡∏û‡πÅ‡∏ó‡∏™‡πÄ‡∏ã‡∏µ‡∏¢‡∏°‡∏Ñ‡∏•‡∏≠‡πÑ‡∏£‡∏î‡πå"
        })
    
    if pale_yellow_pct > 5.0:
        diagnoses["‡∏ò‡∏≤‡∏ï‡∏∏‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏£‡∏≠‡∏á (Ca-Mg-S)"].append({
            "name": "‡∏Ç‡∏≤‡∏î‡πÅ‡∏°‡∏Å‡∏ô‡∏µ‡πÄ‡∏ã‡∏µ‡∏¢‡∏° (Mg)",
            "description": "‡πÉ‡∏ö‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏≠‡πà‡∏≠‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏™‡πâ‡∏ô‡πÉ‡∏ö",
            "recommendation": "‡πÉ‡∏™‡πà‡πÅ‡∏°‡∏Å‡∏ô‡∏µ‡πÄ‡∏ã‡∏µ‡∏¢‡∏°‡∏ã‡∏±‡∏•‡πÄ‡∏ü‡∏ï"
        })
        diagnoses["‡∏à‡∏∏‡∏•‡∏ò‡∏≤‡∏ï‡∏∏"].append({
            "name": "‡∏Ç‡∏≤‡∏î‡πÄ‡∏´‡∏•‡πá‡∏Å (Fe)",
            "description": "‡πÉ‡∏ö‡∏ã‡∏µ‡∏î‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏™‡πâ‡∏ô‡πÉ‡∏ö",
            "recommendation": "‡πÉ‡∏™‡πà‡∏ò‡∏≤‡∏ï‡∏∏‡πÄ‡∏´‡∏•‡πá‡∏Å‡∏Ñ‡∏µ‡πÄ‡∏•‡∏ï"
        })
    
    return diagnoses

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
def save_analysis_results(timestamp, disease_prob, ph_status, diagnoses, texture_features):
    data = {
        "Timestamp": [timestamp],
        "Disease_Probability": [disease_prob],
        "PH_Status": [ph_status],
        "Diagnoses": [str(diagnoses)],
        "Contrast": [texture_features["contrast"]],
        "Homogeneity": [texture_features["homogeneity"]],
        "Energy": [texture_features["energy"]],
        "Correlation": [texture_features["correlation"]]
    }
    df = pd.DataFrame(data)
    
    if not os.path.exists("analysis_results"):
        os.makedirs("analysis_results")
    
    file_path = f"analysis_results/analysis_{timestamp}.csv"
    df.to_csv(file_path, index=False)
    st.success(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå: {file_path}")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á
class VideoProcessor(VideoProcessorBase):
    def __init__(self):
        self.camera_facing = "environment"

    def recv(self, frame):
        img = frame.to_ndarray(format="bgr24")
        if st.session_state.get("capture", False):
            timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            cv2.imwrite(f"captured_image_{timestamp}.jpg", img)
            st.session_state["capture"] = False
            st.session_state["captured_image"] = Image.fromarray(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
        return av.VideoFrame.from_ndarray(img, format="bgr24")

# ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ
st.title("üåø ‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏£‡∏Ñ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏î‡∏ò‡∏≤‡∏ï‡∏∏‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡πÉ‡∏ö‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡∏ä")
st.markdown("‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡∏õ‡∏£‡∏∞‡∏î‡∏¥‡∏©‡∏ê‡πå‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏•", unsafe_allow_html=True)

# ‡πÅ‡∏ó‡πá‡∏ö‡∏´‡∏•‡∏±‡∏Å: ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û vs ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á
input_tab1, input_tab2 = st.tabs(["üì∏ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û", "üì∑ ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á"])

# ‡πÅ‡∏ó‡πá‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û
with input_tab1:
    st.subheader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡∏û‡∏∑‡∏ä")
    uploaded_file = st.file_uploader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡∏û‡∏∑‡∏ä (JPG, PNG, JPEG)", type=["jpg", "png", "jpeg"], 
                                   help="‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5MB")
    
    if uploaded_file is not None:
        image = Image.open(uploaded_file)
        image_resized = image.resize((500, int(500 * image.height / image.width)))
        st.markdown('<div class="centered-image">', unsafe_allow_html=True)
        st.image(image_resized, caption="‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡∏û‡∏∑‡∏ä‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î", use_container_width=True)
        st.markdown('</div>', unsafe_allow_html=True)
        
        with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û..."):
            (brown_highlight, yellow_highlight, purple_highlight, edge_brown_highlight, gray_highlight, 
             pale_yellow_highlight, dark_brown_highlight, img_rgb, brown_pct, yellow_pct, purple_pct, 
             edge_brown_pct, gray_pct, pale_yellow_pct, dark_brown_pct, disease_prob, ph_status, texture_features) = analyze_leaf(image)
        
        # ‡πÅ‡∏ó‡πá‡∏ö‡∏¢‡πà‡∏≠‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        result_tab1, result_tab2, result_tab3, result_tab4 = st.tabs(["üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏µ", "üñºÔ∏è ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ú‡∏¥‡∏ß", "‚öóÔ∏è ‡∏Ñ‡πà‡∏≤ pH", "üè• ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"])
        
        with result_tab1:
            st.subheader("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏µ")
            col1, col2 = st.columns(2, gap="medium")
            
            with col1:
                st.markdown('<div class="highlight-box">', unsafe_allow_html=True)
                brown_resized = Image.fromarray(brown_highlight).resize((200, int(200 * brown_highlight.shape[0] / brown_highlight.shape[1])))
                st.image(brown_resized, caption="‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏• (‡πÇ‡∏£‡∏Ñ‡πÉ‡∏ö‡πÑ‡∏´‡∏°‡πâ)", use_container_width=True)
                st.markdown(f'<div class="metric-card">‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Ç‡∏≤‡∏î‡∏ó‡∏≠‡∏á‡πÅ‡∏î‡∏á: <b>{brown_pct:.2f}%</b></div>', unsafe_allow_html=True)
                purple_resized = Image.fromarray(purple_highlight).resize((200, int(200 * purple_highlight.shape[0] / purple_highlight.shape[1])))
                st.image(purple_resized, caption="‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á (‡∏Ç‡∏≤‡∏î‡∏ü‡∏≠‡∏™‡∏ü‡∏≠‡∏£‡∏±‡∏™)", use_container_width=True)
                st.markdown(f'<div class="metric-card">‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Ç‡∏≤‡∏î‡∏ü‡∏≠‡∏™‡∏ü‡∏≠‡∏£‡∏±‡∏™: <b>{purple_pct:.2f}%</b></div>', unsafe_allow_html=True)
                gray_resized = Image.fromarray(gray_highlight).resize((200, int(200 * gray_highlight.shape[0] / gray_highlight.shape[1])))
                st.image(gray_resized, caption="‡∏™‡∏µ‡πÄ‡∏ó‡∏≤/‡∏Ç‡∏≤‡∏ß (‡πÇ‡∏£‡∏Ñ‡∏£‡∏≤‡πÅ‡∏õ‡πâ‡∏á/‡∏Ç‡∏≤‡∏î‡πÅ‡∏Ñ‡∏•‡πÄ‡∏ã‡∏µ‡∏¢‡∏°)", use_container_width=True)
                st.markdown(f'<div class="metric-card">‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Ç‡∏≤‡∏î‡πÅ‡∏Ñ‡∏•‡πÄ‡∏ã‡∏µ‡∏¢‡∏°: <b>{gray_pct:.2f}%</b></div>', unsafe_allow_html=True)
                st.markdown('</div>', unsafe_allow_html=True)
            
            with col2:
                st.markdown('<div class="highlight-box">', unsafe_allow_html=True)
                yellow_resized = Image.fromarray(yellow_highlight).resize((200, int(200 * yellow_highlight.shape[0] / yellow_highlight.shape[1])))
                st.image(yellow_resized, caption="‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á (‡∏Ç‡∏≤‡∏î‡πÑ‡∏ô‡πÇ‡∏ï‡∏£‡πÄ‡∏à‡∏ô)", use_container_width=True)
                st.markdown(f'<div class="metric-card">‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Ç‡∏≤‡∏î‡πÑ‡∏ô‡πÇ‡∏ï‡∏£‡πÄ‡∏à‡∏ô: <b>{yellow_pct:.2f}%</b></div>', unsafe_allow_html=True)
                edge_brown_resized = Image.fromarray(edge_brown_highlight).resize((200, int(200 * edge_brown_highlight.shape[0] / edge_brown_highlight.shape[1])))
                st.image(edge_brown_resized, caption="‡∏Ç‡∏≠‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏• (‡∏Ç‡∏≤‡∏î‡πÇ‡∏û‡πÅ‡∏ó‡∏™‡πÄ‡∏ã‡∏µ‡∏¢‡∏°)", use_container_width=True)
                st.markdown(f'<div class="metric-card">‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Ç‡∏≤‡∏î‡πÇ‡∏û‡πÅ‡∏ó‡∏™‡πÄ‡∏ã‡∏µ‡∏¢‡∏°: <b>{edge_brown_pct:.2f}%</b></div>', unsafe_allow_html=True)
                pale_yellow_resized = Image.fromarray(pale_yellow_highlight).resize((200, int(200 * pale_yellow_highlight.shape[0] / pale_yellow_highlight.shape[1])))
                st.image(pale_yellow_resized, caption="‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏≠‡πà‡∏≠‡∏ô (‡∏Ç‡∏≤‡∏î‡πÅ‡∏°‡∏Å‡∏ô‡∏µ‡πÄ‡∏ã‡∏µ‡∏¢‡∏°/‡πÄ‡∏´‡∏•‡πá‡∏Å)", use_container_width=True)
                st.markdown(f'<div class="metric-card">‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Ç‡∏≤‡∏î‡πÅ‡∏°‡∏Å‡∏ô‡∏µ‡πÄ‡∏ã‡∏µ‡∏¢‡∏°: <b>{pale_yellow_pct:.2f}%</b></div>', unsafe_allow_html=True)
                dark_brown_resized = Image.fromarray(dark_brown_highlight).resize((200, int(200 * dark_brown_highlight.shape[0] / dark_brown_highlight.shape[1])))
                st.image(dark_brown_resized, caption="‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÄ‡∏Ç‡πâ‡∏° (‡∏à‡∏∏‡∏î‡πÉ‡∏ö/‡∏Ç‡∏≤‡∏î‡∏™‡∏±‡∏á‡∏Å‡∏∞‡∏™‡∏µ)", use_container_width=True)
                st.markdown(f'<div class="metric-card">‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Ç‡∏≤‡∏î‡∏™‡∏±‡∏á‡∏Å‡∏∞‡∏™‡∏µ: <b>{dark_brown_pct:.2f}%</b></div>', unsafe_allow_html=True)
                st.markdown('</div>', unsafe_allow_html=True)
            
            # ‡∏Å‡∏£‡∏≤‡∏ü RGB
            st.subheader("‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏µ RGB")
            plot_rgb_histogram(img_rgb)
            
            # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤
            st.subheader("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤")
            st.markdown('<div class="highlight-box">', unsafe_allow_html=True)
            st.progress(min(disease_prob / 100, 1.0))
            create_card("‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤", f"‡πÉ‡∏ö‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤: <b>{disease_prob:.2f}%</b>", icon="‚ö†Ô∏è")
            st.markdown('</div>', unsafe_allow_html=True)

        with result_tab2:
            st.subheader("‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ú‡∏¥‡∏ß")
            st.markdown('<div class="highlight-box">', unsafe_allow_html=True)
            create_card("Contrast", f"‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°: <b>{texture_features['contrast']:.2f}</b>", icon="üé®")
            create_card("Homogeneity", f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠: <b>{texture_features['homogeneity']:.2f}</b>", icon="üñåÔ∏è")
            create_card("Energy", f"‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô: <b>{texture_features['energy']:.2f}</b>", icon="‚ö°")
            create_card("Correlation", f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå: <b>{texture_features['correlation']:.2f}</b>", icon="üîó")
            st.markdown('</div>', unsafe_allow_html=True)

        with result_tab3:
            st.subheader("‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡πà‡∏≤ pH")
            st.markdown('<div class="highlight-box">', unsafe_allow_html=True)
            create_card("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ pH", f"<b>{ph_status}</b>", icon="‚öóÔ∏è")
            st.markdown('</div>', unsafe_allow_html=True)

        with result_tab4:
            st.subheader("‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥")
            st.markdown('<div class="highlight-box">', unsafe_allow_html=True)
            diagnoses = disease_diagnosis(brown_pct, yellow_pct, purple_pct, edge_brown_pct, gray_pct, pale_yellow_pct, dark_brown_pct, texture_features)
            
            for category, issues in diagnoses.items():
                if issues:
                    with st.expander(f"üìå {category}", expanded=True):
                        for issue in issues:
                            create_card(f"{issue['name']}", f"‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏≠‡∏≤‡∏Å‡∏≤‡∏£: {issue['description']}<br>‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: {issue['recommendation']}")
            if not any(diagnoses.values()):
                st.success("‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏£‡∏Ñ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏î‡∏ò‡∏≤‡∏ï‡∏∏‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô")
            st.markdown('</div>', unsafe_allow_html=True)

        # ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•
        if st.button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"):
            timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            save_analysis_results(timestamp, disease_prob, ph_status, diagnoses, texture_features)

# ‡πÅ‡∏ó‡πá‡∏ö‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á
with input_tab2:
    st.subheader("‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏£‡πå‡∏ó‡πÇ‡∏ü‡∏ô")
    camera_options = st.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á", ["‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á", "‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤"], horizontal=True)
    
    RTC_CONFIG = RTCConfiguration({"iceServers": [{"urls": ["stun:stun.l.google.com:19302"]}]})

    if "capture" not in st.session_state:
        st.session_state["capture"] = False
    if "captured_image" not in st.session_state:
        st.session_state["captured_image"] = None

    class CameraProcessor(VideoProcessorBase):
        def __init__(self):
            self.camera_facing = "environment" if camera_options == "‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á" else "user"

        def recv(self, frame):
            img = frame.to_ndarray(format="bgr24")
            if st.session_state.get("capture", False):
                timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
                cv2.imwrite(f"captured_image_{timestamp}.jpg", img)
                st.session_state["capture"] = False
                st.session_state["captured_image"] = Image.fromarray(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
            return av.VideoFrame.from_ndarray(img, format="bgr24")

    webrtc_ctx = webrtc_streamer(
        key="example",
        mode=WebRtcMode.SENDRECV,
        video_processor_factory=CameraProcessor,
        rtc_configuration=RTC_CONFIG,
        media_stream_constraints={"video": True, "audio": False},
    )

    if st.button("üì∏ ‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û"):
        st.session_state["capture"] = True

    if st.session_state.get("captured_image") is not None:
        st.markdown('<div class="centered-image">', unsafe_allow_html=True)
        st.image(st.session_state["captured_image"], caption="‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ñ‡πà‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á", use_container_width=True)
        st.markdown('</div>', unsafe_allow_html=True)
        
        with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û..."):
            (brown_highlight, yellow_highlight, purple_highlight, edge_brown_highlight, gray_highlight, 
             pale_yellow_highlight, dark_brown_highlight, img_rgb, brown_pct, yellow_pct, purple_pct, 
             edge_brown_pct, gray_pct, pale_yellow_pct, dark_brown_pct, disease_prob, ph_status, texture_features) = analyze_leaf(st.session_state["captured_image"])
        
        # ‡πÅ‡∏ó‡πá‡∏ö‡∏¢‡πà‡∏≠‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        result_tab1, result_tab2, result_tab3, result_tab4 = st.tabs(["üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏µ", "üñºÔ∏è ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ú‡∏¥‡∏ß", "‚öóÔ∏è ‡∏Ñ‡πà‡∏≤ pH", "üè• ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"])
        
        with result_tab1:
            st.subheader("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏µ")
            col1, col2 = st.columns(2, gap="medium")
            
            with col1:
                st.markdown('<div class="highlight-box">', unsafe_allow_html=True)
                brown_resized = Image.fromarray(brown_highlight).resize((200, int(200 * brown_highlight.shape[0] / brown_highlight.shape[1])))
                st.image(brown_resized, caption="‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏• (‡πÇ‡∏£‡∏Ñ‡πÉ‡∏ö‡πÑ‡∏´‡∏°‡πâ)", use_container_width=True)
                st.markdown(f'<div class="metric-card">‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Ç‡∏≤‡∏î‡∏ó‡∏≠‡∏á‡πÅ‡∏î‡∏á: <b>{brown_pct:.2f}%</b></div>', unsafe_allow_html=True)
                purple_resized = Image.fromarray(purple_highlight).resize((200, int(200 * purple_highlight.shape[0] / purple_highlight.shape[1])))
                st.image(purple_resized, caption="‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á (‡∏Ç‡∏≤‡∏î‡∏ü‡∏≠‡∏™‡∏ü‡∏≠‡∏£‡∏±‡∏™)", use_container_width=True)
                st.markdown(f'<div class="metric-card">‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Ç‡∏≤‡∏î‡∏ü‡∏≠‡∏™‡∏ü‡∏≠‡∏£‡∏±‡∏™: <b>{purple_pct:.2f}%</b></div>', unsafe_allow_html=True)
                gray_resized = Image.fromarray(gray_highlight).resize((200, int(200 * gray_highlight.shape[0] / gray_highlight.shape[1])))
                st.image(gray_resized, caption="‡∏™‡∏µ‡πÄ‡∏ó‡∏≤/‡∏Ç‡∏≤‡∏ß (‡πÇ‡∏£‡∏Ñ‡∏£‡∏≤‡πÅ‡∏õ‡πâ‡∏á/‡∏Ç‡∏≤‡∏î‡πÅ‡∏Ñ‡∏•‡πÄ‡∏ã‡∏µ‡∏¢‡∏°)", use_container_width=True)
                st.markdown(f'<div class="metric-card">‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Ç‡∏≤‡∏î‡πÅ‡∏Ñ‡∏•‡πÄ‡∏ã‡∏µ‡∏¢‡∏°: <b>{gray_pct:.2f}%</b></div>', unsafe_allow_html=True)
                st.markdown('</div>', unsafe_allow_html=True)
            
            with col2:
                st.markdown('<div class="highlight-box">', unsafe_allow_html=True)
                yellow_resized = Image.fromarray(yellow_highlight).resize((200, int(200 * yellow_highlight.shape[0] / yellow_highlight.shape[1])))
                st.image(yellow_resized, caption="‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á (‡∏Ç‡∏≤‡∏î‡πÑ‡∏ô‡πÇ‡∏ï‡∏£‡πÄ‡∏à‡∏ô)", use_container_width=True)
                st.markdown(f'<div class="metric-card">‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Ç‡∏≤‡∏î‡πÑ‡∏ô‡πÇ‡∏ï‡∏£‡πÄ‡∏à‡∏ô: <b>{yellow_pct:.2f}%</b></div>', unsafe_allow_html=True)
                edge_brown_resized = Image.fromarray(edge_brown_highlight).resize((200, int(200 * edge_brown_highlight.shape[0] / edge_brown_highlight.shape[1])))
                st.image(edge_brown_resized, caption="‡∏Ç‡∏≠‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏• (‡∏Ç‡∏≤‡∏î‡πÇ‡∏û‡πÅ‡∏ó‡∏™‡πÄ‡∏ã‡∏µ‡∏¢‡∏°)", use_container_width=True)
                st.markdown(f'<div class="metric-card">‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Ç‡∏≤‡∏î‡πÇ‡∏û‡πÅ‡∏ó‡∏™‡πÄ‡∏ã‡∏µ‡∏¢‡∏°: <b>{edge_brown_pct:.2f}%</b></div>', unsafe_allow_html=True)
                pale_yellow_resized = Image.fromarray(pale_yellow_highlight).resize((200, int(200 * pale_yellow_highlight.shape[0] / pale_yellow_highlight.shape[1])))
                st.image(pale_yellow_resized, caption="‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏≠‡πà‡∏≠‡∏ô (‡∏Ç‡∏≤‡∏î‡πÅ‡∏°‡∏Å‡∏ô‡∏µ‡πÄ‡∏ã‡∏µ‡∏¢‡∏°/‡πÄ‡∏´‡∏•‡πá‡∏Å)", use_container_width=True)
                st.markdown(f'<div class="metric-card">‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Ç‡∏≤‡∏î‡πÅ‡∏°‡∏Å‡∏ô‡∏µ‡πÄ‡∏ã‡∏µ‡∏¢‡∏°: <b>{pale_yellow_pct:.2f}%</b></div>', unsafe_allow_html=True)
                dark_brown_resized = Image.fromarray(dark_brown_highlight).resize((200, int(200 * dark_brown_highlight.shape[0] / dark_brown_highlight.shape[1])))
                st.image(dark_brown_resized, caption="‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÄ‡∏Ç‡πâ‡∏° (‡∏à‡∏∏‡∏î‡πÉ‡∏ö/‡∏Ç‡∏≤‡∏î‡∏™‡∏±‡∏á‡∏Å‡∏∞‡∏™‡∏µ)", use_container_width=True)
                st.markdown(f'<div class="metric-card">‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Ç‡∏≤‡∏î‡∏™‡∏±‡∏á‡∏Å‡∏∞‡∏™‡∏µ: <b>{dark_brown_pct:.2f}%</b></div>', unsafe_allow_html=True)
                st.markdown('</div>', unsafe_allow_html=True)
            
            st.subheader("‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏µ RGB")
            plot_rgb_histogram(img_rgb)
            
            st.subheader("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤")
            st.markdown('<div class="highlight-box">', unsafe_allow_html=True)
            st.progress(min(disease_prob / 100, 1.0))
            create_card("‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤", f"‡πÉ‡∏ö‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤: <b>{disease_prob:.2f}%</b>", icon="‚ö†Ô∏è")
            st.markdown('</div>', unsafe_allow_html=True)

        with result_tab2:
            st.subheader("‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ú‡∏¥‡∏ß")
            st.markdown('<div class="highlight-box">', unsafe_allow_html=True)
            create_card("Contrast", f"‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°: <b>{texture_features['contrast']:.2f}</b>", icon="üé®")
            create_card("Homogeneity", f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠: <b>{texture_features['homogeneity']:.2f}</b>", icon="üñåÔ∏è")
            create_card("Energy", f"‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô: <b>{texture_features['energy']:.2f}</b>", icon="‚ö°")
            create_card("Correlation", f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå: <b>{texture_features['correlation']:.2f}</b>", icon="üîó")
            st.markdown('</div>', unsafe_allow_html=True)

        with result_tab3:
            st.subheader("‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡πà‡∏≤ pH")
            st.markdown('<div class="highlight-box">', unsafe_allow_html=True)
            create_card("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ pH", f"<b>{ph_status}</b>", icon="‚öóÔ∏è")
            st.markdown('</div>', unsafe_allow_html=True)

        with result_tab4:
            st.subheader("‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥")
            st.markdown('<div class="highlight-box">', unsafe_allow_html=True)
            diagnoses = disease_diagnosis(brown_pct, yellow_pct, purple_pct, edge_brown_pct, gray_pct, pale_yellow_pct, dark_brown_pct, texture_features)
            
            for category, issues in diagnoses.items():
                if issues:
                    with st.expander(f"üìå {category}", expanded=True):
                        for issue in issues:
                            create_card(f"{issue['name']}", f"‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏≠‡∏≤‡∏Å‡∏≤‡∏£: {issue['description']}<br>‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: {issue['recommendation']}")
            if not any(diagnoses.values()):
                st.success("‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏£‡∏Ñ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏î‡∏ò‡∏≤‡∏ï‡∏∏‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô")
            st.markdown('</div>', unsafe_allow_html=True)

        if st.button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"):
            timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            save_analysis_results(timestamp, disease_prob, ph_status, diagnoses, texture_features)